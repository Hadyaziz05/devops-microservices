pipeline {
    agent {
        node {
            label 'jenkins-docker-agent'
        }
    }

    triggers {
        pollSCM('* * * * *')
    }

    environment {
        TAG = "v${env.BUILD_NUMBER}"
        IMAGE = "hadyaziz05/backend:${TAG}"
        DOCKER_HOST = 'tcp://docker-socat:2375'
    }

    stages {

        stage('Check for backend changes') {
            steps {
                script {
                    def changedFiles = sh(
                        script: "git diff --name-only HEAD~1 HEAD",
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changedFiles}"

                    def hasBackendendChanges = changedFiles.split('\n').any { it.startsWith('frontend/') }

                    if (!hasBackendendChanges) {
                        echo "No changes in /frontend folder. Skipping build."
                        currentBuild.result = 'SUCCESS'
                        sh 'exit 0'
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo "Building Docker Image: ${IMAGE}"
                sh 'docker build -t $IMAGE backend/'
            }
        }

        stage('Test') {
            steps {
                echo "Testing container..."
                sh 'docker run --rm $IMAGE node --version'
            }
        }

        stage('Push Image') {
            steps {
                echo "Pushing to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh '''
                    echo "$PASS" | docker login -u "$USER" --password-stdin
                    docker push $IMAGE
                    '''
                }
            }
        }

        stage('Blue-Green Deploy') {
            agent { label 'controller' }
            steps {
                echo "Performing Blue-Green Deployment..."
                withCredentials([file(credentialsId: 'kube-config-jenkins', variable: 'KUBECONFIG')]) {
                    script {
                        def currentVersion = sh(
                            script: "kubectl get service backend-service -o=jsonpath='{.spec.selector.version}'",
                            returnStdout: true
                        ).trim()

                        def newVersion = currentVersion == "blue" ? "green" : "blue"
                        def newDeployment = "backend-${newVersion}"
                        def oldDeployment = "backend-${currentVersion}"

                        echo "Deploying to ${newDeployment} with image ${IMAGE}"

                        // Deploy to new version
                        sh "kubectl scale deployment/${newDeployment} --replicas=2"
                        sh "kubectl set image deployment/${newDeployment} backend=${IMAGE}"
                        sh "kubectl rollout status deployment/${newDeployment}"

                        // Switch service to new version
                        sh "kubectl patch service backend-service -p '{\"spec\": {\"selector\": {\"app\": \"backend\", \"version\": \"${newVersion}\"}}}'"

                        // Scale down old version
                        sh "kubectl scale deployment/${oldDeployment} --replicas=0"

                        env.NEW_VERSION = newVersion
                        env.OLD_VERSION = currentVersion
                    }
                }
            }
        }

        stage('Update YAML in Git') {
            steps {
                echo "Updating Kubernetes YAML in Git with new image: ${IMAGE}"
                withCredentials([usernamePassword(credentialsId: 'git-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                    rm -rf repo
                    git config --global user.name "Jenkins CI"
                    git config --global user.email "jenkins@example.com"
                    git clone https://$GIT_USER:$GIT_PASS@github.com/Hadyaziz05/devops-microservices.git repo
                    cd repo

                    NEW_VERSION=$(kubectl get service backend-service -o=jsonpath='{.spec.selector.version}' | grep -q blue && echo green || echo blue)

                    YAML_PATH=k8s/backend-${NEW_VERSION}-deployment.yaml

                    sed -i "s|image: .*|image: ${IMAGE}|" "$YAML_PATH"

                    git add "$YAML_PATH"
                    git commit -m "[skip ci] update backend ${NEW_VERSION} image to ${TAG}" || echo "No changes"
                    git push origin main
                    '''
                }
            }
        }
    }
}
