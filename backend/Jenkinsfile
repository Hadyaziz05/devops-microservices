pipeline {
    agent {
        node {
            label 'jenkins-docker-agent'
        }
    }

    environment {
        TAG = "v${env.BUILD_NUMBER}"
        IMAGE = "hadyaziz05/backend:${TAG}"
        DOCKER_HOST = 'tcp://docker-socat:2375'
    }

    stages {
        stage('Build') {
            steps {
                echo "Building Docker Image: ${IMAGE}"
                sh '''
                docker build -t $IMAGE backend/
                '''
            }
        }

        stage('Test') {
            steps {
                echo "Testing container..."
                sh '''
                docker run --rm $IMAGE node --version
                '''
            }
        }

        stage('Push') {
            steps {
                echo "Pushing to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh '''
                    echo "$PASS" | docker login -u "$USER" --password-stdin
                    docker push $IMAGE
                    '''
                }
            }
        }

        stage('Deploy Blue-Green') {
            agent {
                label 'controller'
            }
            steps {
                echo "Starting Blue-Green Deployment..."
                withCredentials([file(credentialsId: 'kube-config-jenkins', variable: 'KUBECONFIG')]) {
                    script {
                        // Determine current live version
                        def currentVersion = sh(script: '''
                            kubectl get service backend-service -o=jsonpath='{.spec.selector.version}'
                        ''', returnStdout: true).trim()

                        def newVersion = currentVersion == "blue" ? "green" : "blue"
                        def newDeployment = "backend-${newVersion}"

                        echo "Current version: ${currentVersion}"
                        echo "Deploying to: ${newDeployment}"

                        // Set image on new version
                        sh """
                        kubectl set image deployment/${newDeployment} backend=${IMAGE}
                        kubectl rollout status deployment/${newDeployment}
                        """

                        // Switch the service selector
                        sh """
                        kubectl patch service backend-service -p '{"spec": {"selector": {"app": "backend", "version": "${newVersion}"}}}'
                        """

                        // Optional: scale down the old version
                        def oldDeployment = "backend-${currentVersion}"
                        sh "kubectl scale deployment/${oldDeployment} --replicas=0"
                    }
                }
            }
        }
    }
}
